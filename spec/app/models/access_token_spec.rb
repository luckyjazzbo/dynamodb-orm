require 'spec_helper'

RSpec.describe Mes::AccessToken do
  describe '.create_with_id!' do
    include_context 'with mes tables'

    before do
      allow_any_instance_of(Mes::ContentIdServiceClient)
        .to receive_messages(next_id: SecureRandom.base58(16))
    end

    it 'assigns id' do
      token = described_class.create_with_id!(tenant_id: 't-A1')

      expect(token.id)
        .to eq(Mes::ContentIdServiceClient.new('http://url', 'type').next_id)
    end
  end

  context 'callbacks' do
    describe '#before_create' do
      %w(access_token initialization_vector).each do |method|
        it "assigns ##{method}" do
          subject.save
          expect(subject.send(method)).to_not be_empty
        end
      end
    end
  end

  context 'attributes' do
    describe 'default values' do
      {
        type: 'EMBED',
        device_class: 'BROWSER'
      }.each do |attr, value|
        it "sets default value for #{attr}" do
          expect(subject.send(attr)).to eq(value)
        end
      end
    end

    describe '#access_token' do
      subject { described_class.new }

      it 'is generated automaticaly' do
        expect { subject.save }
          .to change { subject.access_token }
          .from(nil)
      end

      it 'is not replacing the manualy set token' do
        subject.access_token = 'some_token'
        expect { subject.save }.not_to change { subject.access_token }
      end

      it 'is generates 32-char string' do
        subject.save
        expect(subject.access_token.size).to eq 32
      end
    end
  end

  describe '.by_tenant_id' do
    include_context 'with mes tables'

    before do
      FactoryGirl.create(:access_token, tenant_id: 'u1')
      FactoryGirl.create(:access_token, tenant_id: 'u1')
      FactoryGirl.create(:access_token, tenant_id: 'u1').delete # with soft delete
      FactoryGirl.create(:access_token, tenant_id: 'u2')
    end

    it 'filters tokens by tenant_id' do
      expect(
        described_class.by_tenant_id('u1').to_a.size
      ).to eq(2)
    end
  end

  describe '#delete' do
    include_context 'with mes tables'
    subject { FactoryGirl.create(:access_token, tenant_id: 'u1') }

    it 'stores deactivated_at' do
      Timecop.freeze do
        expect { subject.delete }
          .to change { subject.deactivated_at }
          .from(0).to Time.now.to_f
      end
    end

    it 'stores deactivated status' do
      expect { subject.delete }
        .to change { subject.status }
        .from('VALID').to 'DEACTIVATED'
    end

    it 'makes it inactive' do
      expect { subject.delete }
        .to change { subject.active? }
        .from(true).to false
    end

    it 'keeps it in DB' do
      subject.delete
      loaded_item = described_class.find_without_soft_deletion(subject.id)
      expect(loaded_item).not_to be_nil
      expect(loaded_item).not_to be_active
      expect(loaded_item.status).to eq 'DEACTIVATED'
    end
  end

  describe '#assign_id!' do
    let(:access_token) { 'x-777' }
    let(:id_service_client) { double('Mes::ContentIdServiceClient') }

    before do
      allow(Mes::ContentIdServiceClient)
        .to receive(:new)
        .and_return(id_service_client)
      allow(id_service_client)
        .to receive(:next_id)
        .and_return(access_token)
    end

    it 'assigns a token generated by client' do
      subject.assign_id!
      expect(subject.id).to eq(access_token)
    end
  end
end
